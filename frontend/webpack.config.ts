import path from 'node:path'
import { Configuration as WebpackConfiguration } from 'webpack'
import { Configuration as WebpackDevServerConfiguration } from 'webpack-dev-server'
import HTMLWebpackPlugin from 'html-webpack-plugin'
import WebpackBar from 'webpackbar'

import paths from './webpack.paths.js'

interface WebpackConfig extends WebpackConfiguration {
  devServer?: WebpackDevServerConfiguration
}

const isDevelopment = process.env.NODE_ENV === 'development'

const filename = (extension: string) =>
  isDevelopment ? `[name].${extension}` : `[name].[contenthash].${extension}`
const assetsFilename = () => (isDevelopment ? '[base]' : '[contenthash][ext][query]')

const webpackConfig: WebpackConfig = {
  context: paths.src,
  entry: './index.ts',
  output: {
    clean: true,
    filename: filename('js'),
    path: paths.dist,
    assetModuleFilename: `assets/${assetsFilename()}`,
  },
  mode: isDevelopment ? 'development' : 'production',
  resolve: {
    extensions: ['.js', '.ts'],
  },
  devtool: isDevelopment ? 'source-map' : false,
  devServer: {
    static: paths.dist,
    hot: true,
    port: 5550,
    open: true,
    proxy: {
      '/cookie': 'http://localhost:3000',
    },
  },
  plugins: [
    new WebpackBar(),
    new HTMLWebpackPlugin({
      title: 'Webpack',
      favicon: path.resolve(paths.public, 'assets', 'favicon.svg'),
      template: path.resolve(paths.public, 'index.html'),
      filename: 'index.html',
    }),
  ],
  module: {
    rules: [
      {
        test: /\.(ts|js)$/,
        exclude: /node_modules/,
        use: ['ts-loader'],
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
}

export default webpackConfig
