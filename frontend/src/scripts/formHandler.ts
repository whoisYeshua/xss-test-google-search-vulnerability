import { purify } from '../scripts/purify/index'

const unsafeForm = document.querySelector('.unsafe__form') as HTMLFormElement
const unsafeOutput = document.querySelector('.unsafe__output') as HTMLOutputElement

const supersafeForm = document.querySelector('.supersafe__form') as HTMLFormElement
const supersafeOutput = document.querySelector('.supersafe__output') as HTMLOutputElement

const semisafeForm = document.querySelector('.semisafe__form') as HTMLFormElement
const semisafeOutput = document.querySelector('.semisafe__output') as HTMLOutputElement

const safeForm = document.querySelector('.safe__form') as HTMLFormElement
const safeOutput = document.querySelector('.safe__output') as HTMLOutputElement

type InsertFunction = (target: Element, value: string) => void

const unsafeInsert: InsertFunction = (target, value = '') => {
  target.innerHTML = value
}

const supersafeInsert: InsertFunction = (target, value = '') => {
  target.textContent = value
}

const semisafeInsert: InsertFunction = (target, value = '') => {
  const template = document.createElement('template')
  template.innerHTML = value
  purify(template.content)

  target.innerHTML = template.innerHTML
}

const safeInsert: InsertFunction = (target, value = '') => {
  const template = document.createElement('template')
  template.innerHTML = value
  purify(template.content)

  const serializedNewTree = new XMLSerializer().serializeToString(template)
  // Remove the outer span before returning the string representation of the
  // processed copy.
  const serializedValue = serializedNewTree.slice(
    serializedNewTree.indexOf('>') + 1,
    serializedNewTree.lastIndexOf('</')
  )
  target.innerHTML = serializedValue
}

const submitHandler = (callback: InsertFunction, target: Element) => (event: Event) => {
  event.preventDefault()
  let form = new FormData(event.target as HTMLFormElement)
  const inputValue = String(form.get('input'))
  callback(target, inputValue)
}

unsafeForm.addEventListener('submit', submitHandler(unsafeInsert, unsafeOutput))
supersafeForm.addEventListener('submit', submitHandler(supersafeInsert, supersafeOutput))
semisafeForm.addEventListener('submit', submitHandler(semisafeInsert, semisafeOutput))
safeForm.addEventListener('submit', submitHandler(safeInsert, safeOutput))
